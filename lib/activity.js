// Generated by CoffeeScript 1.3.3
(function() {
  var $, Activity, GITHUB, helpers, render, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  GITHUB = 'https://github.com';

  util = {
    truncate: function(s, l, append) {
      var o;
      if (l == null) {
        l = 50;
      }
      if (append == null) {
        append = "&hellip;";
      }
      o = s.slice(0, l);
      if (s.length > l) {
        o += append;
      }
      return o;
    },
    humanTime: function(date) {
      var days, del, hours, mins, now, secs;
      now = new Date();
      del = now - date;
      secs = del / 1000;
      if (secs < 5) {
        return "just now";
      }
      if (secs < 60) {
        return "" + (Math.floor(secs)) + "s ago";
      }
      mins = secs / 60;
      if (mins < 60) {
        return "" + (Math.floor(mins)) + "m ago";
      }
      hours = mins / 60;
      if (hours < 24) {
        return "" + (Math.floor(hours)) + "h ago";
      }
      days = hours / 24;
      return "" + (Math.floor(days)) + "d ago";
    },
    parseISO8601: function(string) {
      var d, date, offset, out, regexp, time;
      regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" + "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(.([0-9]+))?)?" + "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
      d = string.match(new RegExp(regexp));
      offset = 0;
      date = new Date(d[1], 0, 1);
      if (d[3]) {
        date.setMonth(d[3] - 1);
      }
      if (d[5]) {
        date.setDate(d[5]);
      }
      if (d[7]) {
        date.setHours(d[7]);
      }
      if (d[8]) {
        date.setMinutes(d[8]);
      }
      if (d[10]) {
        date.setSeconds(d[10]);
      }
      if (d[12]) {
        date.setMilliseconds(Number("0." + d[12]) * 1000);
      }
      if (d[14]) {
        offset = (Number(d[16]) * 60) + Number(d[17]);
        offset *= (d[15] === "-" ? 1 : -1);
      }
      offset -= date.getTimezoneOffset();
      time = Number(date) + (offset * 60 * 1000);
      out = new Date();
      out.setTime(Number(time));
      return out;
    }
  };

  helpers = {
    github: {
      who: function(ev) {
        var avatar;
        avatar = ev.person.avatar || 'http://www.gravatar.com/avatar/00000000000000000000000000000000?d=mm&s=50';
        return "<a href=\"" + avatar + "\"><img src='" + avatar + "'></a>\n<a href='" + ev.person.permalink + "'>" + ev.person.display_name + "</a>";
      },
      repoUrl: function(c) {
        return "" + GITHUB + "/" + c.repo.full_name;
      },
      repo: function(c) {
        return "<a title='" + c.repo.full_name + " on GitHub' href='" + (helpers.github.repoUrl(c)) + "'>" + c.repo.full_name + "</a>";
      },
      titleForDefault: function(c) {
        return "did something";
      },
      titleForCommitCommentEvent: function(c) {
        return "commented on\n<a href='" + c.github_payload.comment.html_url + "'>" + c.github_payload.comment.commit_id.slice(0, 7) + "</a>\non " + (helpers.github.repo(c));
      },
      titleForCreateEvent: function(c) {
        return "created a " + c.github_payload.ref_type + " on " + (helpers.github.repo(c));
      },
      titleForDownloadEvent: function(c) {
        return "created a new\n<a href='" + (helpers.github.repoUrl(c)) + "/downloads'>download</a>\non " + (helpers.github.repo(c));
      },
      titleForForkEvent: function(c) {
        return "forked " + (helpers.github.repo(c));
      },
      titleForIssueCommentEvent: function(c) {
        return "commented on issue\n<a href='" + c.github_payload.issue.html_url + "#issuecomment-" + c.github_payload.comment.id + "'>#" + c.github_payload.issue.number + "</a>\non " + (helpers.github.repo(c));
      },
      titleForIssuesEvent: function(c) {
        return "" + c.github_payload.action + " issue <a href='" + c.github_payload.issue.html_url + "'>#" + c.github_payload.issue.number + "</a> on " + (helpers.github.repo(c));
      },
      titleForPullRequestEvent: function(c) {
        return "" + c.github_payload.action + " pull request <a href='" + c.github_payload.pull_request.html_url + "'>#" + c.github_payload.pull_request.number + "</a> on " + (helpers.github.repo(c));
      },
      titleForPushEvent: function(c) {
        var branch;
        branch = c.github_payload.ref.split('/')[2];
        if (branch) {
          return "pushed to <strong>" + branch + "</strong> on " + (helpers.github.repo(c));
        } else {
          return "pushed to " + (helpers.github.repo(c));
        }
      },
      titleForWatchEvent: function(c) {
        return "" + c.github_payload.action + " watching " + (helpers.github.repo(c));
      },
      detailsForDefault: function(c) {
        return "More " + c.type + " details here &hellip;";
      },
      detailsForCommitCommentEvent: function(c) {
        return util.truncate(c.github_payload.comment.body);
      },
      detailsForCreateEvent: function(c) {
        var o;
        o = [];
        if (c.github_payload.ref_type === "tag") {
          o.push("Tagged ");
        } else {
          o.push("Created ref ");
        }
        o.push("<a href='" + (helpers.github.repoUrl(c)) + "/tree/" + c.github_payload.ref + "'>" + c.github_payload.ref + "</a>");
        return o.join('');
      },
      detailsForDownloadEvent: function(c) {
        return "" + (util.truncate(c.github_payload.download.description));
      },
      detailsForForkEvent: function(c) {
        return "&rarr; <a href='" + c.github_payload.forkee.html_url + "'>" + c.github_payload.forkee.html_url + "</a>";
      },
      detailsForIssueCommentEvent: function(c) {
        return util.truncate(c.github_payload.comment.body);
      },
      detailsForIssuesEvent: function(c) {
        return "" + (util.truncate(c.github_payload.issue.title));
      },
      detailsForPullRequestEvent: function(c) {
        return "" + (util.truncate(c.github_payload.pull_request.title));
      },
      detailsForPushEvent: function(c) {
        var commit, maxCommits, o, _i, _len, _ref;
        maxCommits = 3;
        o = [];
        _ref = c.github_payload.commits.slice(0, maxCommits);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          commit = _ref[_i];
          o.push("" + (util.truncate(commit.message, 50, '')) + "<a href='" + (helpers.github.repoUrl(c)) + "/commit/" + commit.sha + "'>&hellip;</a>");
        }
        if (c.github_payload.commits.length > maxCommits) {
          o.push("and " + (c.github_payload.commits.length - maxCommits) + " more&hellip;");
        }
        return o.join("<br>");
      },
      detailsForWatchEvent: function(c) {
        return "";
      },
      title: function(ev) {
        var t;
        t = helpers.github["titleFor" + ev.type] || helpers.github.titleForDefault;
        return "" + (helpers.github.who(ev)) + " " + (t(ev));
      },
      details: function(ev) {
        var d;
        d = helpers.github["detailsFor" + ev.type] || helpers.github.detailsForDefault;
        return "" + (d(ev));
      }
    },
    mailman: {
      title: function(ev) {
        var avatar;
        avatar = ev.person.avatar || 'http://www.gravatar.com/avatar/00000000000000000000000000000000?d=mm&s=50';
        return "<a href=\"" + avatar + "\"><img src='" + avatar + "'></a>\n<a href='" + ev.person.permalink + "'>" + ev.person.display_name + "</a>\n<a href=\"" + ev.link + "\">emailed</a>\n<strong>" + ev.mailman.name + "</strong>";
      },
      details: function(ev) {
        var subj;
        subj = ev.subject.replace(/\[([^\]]+)\]\s+(.+)/, "$2");
        return "" + (util.truncate(subj, 50, '')) + "<a href='" + ev.link + "'>&hellip;</a>";
      }
    },
    "default": {
      title: function(ev) {
        return "Default title";
      },
      details: function(ev) {
        return "Default details";
      }
    }
  };

  render = function(ev) {
    var date, details, title, _ref, _ref1, _ref2, _ref3;
    date = util.humanTime(util.parseISO8601(ev.timestamp));
    title = (_ref = (_ref1 = helpers[ev._activity_type]) != null ? _ref1.title : void 0) != null ? _ref : helpers["default"].title;
    details = (_ref2 = (_ref3 = helpers[ev._activity_type]) != null ? _ref3.details : void 0) != null ? _ref2 : helpers["default"].details;
    return "<div class='event'>\n    <p class='title'>\n        <span class='when'>" + date + "</span>\n        <span class='what'>" + (title(ev)) + "</span>\n    </p>\n    <p class='details'>" + (details(ev)) + "</p>\n</div>";
  };

  Activity = (function() {

    Activity.prototype.events = [];

    function Activity(element, options) {
      var self,
        _this = this;
      this.element = element;
      this.options = options;
      this.gotEvents = __bind(this.gotEvents, this);

      self = this;
      $(this.element).addClass('activity').addClass('loading');
      $.each(this.options.url, function(i, url) {
        return $.ajax({
          url: url,
          dataType: 'jsonp',
          success: _this.gotEvents,
          error: _this.error
        });
      });
    }

    Activity.prototype.gotEvents = function(jsonObject) {
      this.events = this.events.concat(jsonObject.data);
      this.events.sort(function(a, b) {
        if (a.timestamp > b.timestamp) {
          return -1;
        } else {
          return 1;
        }
      });
      window.events = this.events;
      $(this.element).removeClass('loading');
      return this.drawEvents();
    };

    Activity.prototype.error = function(e) {
      if (console) {
        return console.log('error', e);
      }
    };

    Activity.prototype.drawEvents = function() {
      var e, res, _i, _len, _ref, _results;
      this.element.empty();
      _ref = this.events;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        res = render(e);
        _results.push($(res).appendTo(this.element));
      }
      return _results;
    };

    return Activity;

  })();

  jQuery.fn.activity = function(options) {
    if (!options['url']) {
      if (console) {
        console.error("Activity plugin needs 'url' key!");
      }
      return this;
    }
    new Activity(this, options);
    return this;
  };

}).call(this);
